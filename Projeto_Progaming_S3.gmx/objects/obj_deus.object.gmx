<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_blocoDicas</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variáveis para o Desenho

movimentoHor = 50;
movimentoVer = 48;

xInicial = 880;
yInicial = 169;

xAtual = xInicial;
yAtual = yInicial;


//Cores
corCirculoInicial = c_black;
corCirculoAtual = corCirculoInicial;

corPintado = c_red;
pintado = false;

//xPintado = 1030;
//yPintado = 310;

xPintado = xInicial + 3*movimentoHor;
yPintado = yInicial + 3*movimentoVer;

//Vencer

//xVencer = 1179;
//yVencer = 451;

xVencer = xInicial + 6*movimentoHor;
yVencer = yInicial + 6*movimentoVer;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inicialização de variáveis

globalvar comandoAtual;
comandoAtual = 0;
subComando = 0;
dentroIf = false;
globalvar listaComandos;
listaComandos[0] = 0;
comandoFinal = 0;
globalvar ciclos;
ciclos = 0;
globalvar maxCiclos;
maxCiclos = 0;

globalvar vencer;
vencer = false;
globalvar perder;
perder = false;

globalvar terminou;
terminou = false;

executar = false;



//Estados
globalvar NADA;
globalvar moverDIREITA;
globalvar moverESQUERDA;
globalvar moverCIMA;
globalvar moverBAIXO;

NADA = 0;
moverDIREITA = 1;
moverESQUERDA = 2;
moverCIMA = 3;
moverBAIXO =  4;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variáveis para a Fase 2
batidas = 0;
fermento = false;
farinha = false;

perderPor = NADA;

globalvar BATER_MASSA;
BATER_MASSA = 1;
globalvar FERMENTO;
FERMENTO = 2;
globalvar FARINHA;
FARINHA = 3;
globalvar SE;
SE = 4;
globalvar METADE_CICLOS;
METADE_CICLOS = ciclos == floor(maxCiclos/2);


globalvar BATEU_MUITO;
BATEU_MUITO = 6;
globalvar BATEU_POUCO;
BATEU_POUCO = 7;




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variáveis para conexão

ladoDeus = instance_create(x + 17, y + 91, obj_ladoDeus);

with (ladoDeus){
    blocoPai = noone;
}

ladoDeus.blocoPai = self;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarme de espera para a Fase do Tutorial
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarme para a animação final do tutorial

instance_create(0,0,obj_concluir);
instance_create(475,584,obj_BotaoConcluir);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarme de derrota

terminou = true;

//obj_visualizador.sprite_index = spr_animDerrota;

switch(perderPor){
    default:
        break;
    case FERMENTO:
        with(obj_visualizador){
            sprite_index = spr_animDerrotaFermento2;
            image_speed = 1;
        }
        break;
    case FARINHA:
        with(obj_visualizador){
            sprite_index = spr_animDerrotaFarinha2;
            image_speed = 1;
        }
        break;
    case BATEU_MUITO:
        with(obj_visualizador){
            sprite_index = spr_animDerrotaBaterMuito2;
            image_speed = 1;
        }
        break;
    case BATEU_POUCO:
        with(obj_visualizador){
            sprite_index = spr_animDerrotaBaterPouco2;
            image_speed = 1;
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parar a animação

terminou = true;
obj_visualizador.image_speed = 0;

instance_create(room_width/2, room_height/2, obj_concluir);
instance_create(room_width/2, room_height/2, obj_BotaoConcluir);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarme de esperar e cuidar da derrota no meio da execução

//obj_visualizador.image_speed = 0;

if(perder == true &amp;&amp; terminou == false &amp;&amp; alarm[2]&lt;0){
    switch(perderPor){
        default:
            break;
        case FERMENTO:
            with(obj_visualizador){
                sprite_index = spr_animDerrotaFermento;
                image_speed = 1;
            }
            alarm[2] = 2*room_speed;
            break;
        case FARINHA:
            with(obj_visualizador){
                sprite_index = spr_animDerrotaFarinha;
                image_speed = 1;
            }
            alarm[2] = 2*room_speed;
            break;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parar 
/*
executar = false;

xAtual = xInicial;
yAtual = yInicial;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Executar
//executar = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fase 1 - Desenhar o circulo

if(room == Room_Fase1){

    draw_self();
    draw_sprite(spr_grid, 0, 754, 97);
    //draw_set_colour(corCirculoAtual);
    //draw_circle(xAtual, yAtual, 10, false);
    draw_sprite(spr_cachorro, pintado, xAtual, yAtual);
    
    if(pintado == false){//Enquanto não foi pegue desenhe a bolinha
        //draw_set_colour(corPintado);
        //draw_circle(xPintado, yPintado, 5, false);
        draw_sprite(spr_bolinha, 0, xPintado, yPintado);
    }/*
    if(vencer == false){
        draw_set_colour(c_yellow);
        draw_circle(xVencer, yVencer, 5, false);
    }
    */
    draw_sprite(spr_pessoa, 0, xVencer, yVencer);
    
    //================================
    
    //Mudar a cor do círculo
    if (xAtual == xPintado &amp;&amp; yAtual == yPintado){
        pintado = true;
        corCirculoAtual = corPintado;
    }
    
    if(pintado == true){
        if (xAtual == xVencer &amp;&amp; yAtual == yVencer){
            vencer = true;
        }
    }
    
    
    //================================
    //Rodar os comandos
    if(executar == true &amp;&amp; alarm[4]&lt;0){
        if(ciclos&lt;=0){//Parar de executar ao acabar os ciclos
            if(vencer == false){
                perder = true;
            }
            //executar = false;
        }else{
        
            if (comandoAtual &lt; array_length_1d(listaComandos) ){
                scr_executar2(listaComandos, comandoAtual);
                //show_debug_message(string(listaComandos[comandoAtual].comandoConector));
                comandoAtual++;
            }else{//Voltar para o começo do laço
                comandoAtual = 0;
                ciclos--;
            }
        }
        
    }else if(executar == false){
        ciclos = maxCiclos;
    }
    
    
    
    //show_debug_message("obj_Deus comandoAtual: " + string(xAtual));
    //show_debug_message("obj_Deus xAtual: " + string(xAtual));


}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Criar a instância da tela de vitória

switch(room){
    case Room_Fase1:
        if(vencer == true &amp;&amp; !instance_exists(obj_concluir)){
            if(alarm[3]&lt;0){
                if (!instance_exists(obj_animConc)){
                    instance_create(754, 97, obj_animConc);
                }
                alarm[3] = 80;
            }
        }else if(perder == true){
            if (!instance_exists(obj_animConc)){
                    instance_create(754, 97, obj_animConc);
            }
        }
        break;
    default:
        break;
        
}

/*largura = 600;
altura = 500;
x1 = room_width/2 - largura/2;
y1 = room_height/2 - altura/2;

if(vencer == true){
    draw_rectangle(x1, y1, x1 + largura, y1 + altura, false);
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execução da fase 2

if (room == Room_Fase2){
    draw_self();
    
    if(perder == false &amp;&amp; vencer == false){
    
    if(executar == true &amp;&amp; alarm[0] &lt; 0){//============
        if(ciclos &lt;= 0){//Quando parar
            obj_visualizador.sprite_index = spr_animNeutro;
            if(batidas == 10 &amp;&amp; perder == false){
                vencer = true;
            }else if(batidas &gt; 10){//Perder por bater demais
                perder = true;
                perderPor = BATEU_MUITO;
            }else if(batidas &lt; 10){
                perder = true;
                perderPor = BATEU_POUCO;
            }
            //executar = false;
        }else{//======
            if(comandoAtual &lt; array_length_1d(listaComandos)){
                scr_executarFase2(listaComandos, comandoAtual);
                if(dentroIf == false){  
                    subComando = 0;  
                    comandoAtual += 1;
                }else{
                    //Vê em qual conector a peça Se está
                    linhaSe = obj_bloco.listaConectores[comandoAtual].objConectado;
                    //Criar a lista de subcomandos para executar
                    //listaSubComandos = array_create(linhaSe.qntdSubConectores);
                    for(i=0; i&lt;linhaSe.qntdSubConectores; i++){
                        listaSubComandos[i] = linhaSe.listaSubConectores[i].comandoConector;
                    }
                    show_debug_message("obj_deus: " + string(listaSubComandos));
                    //Se ainda não executou todos os subcomandos
                    if (subComando &lt; linhaSe.qntdSubConectores){
                        scr_executarFase2(listaSubComandos, subComando);
                        subComando += 1;
                    }else{
                        dentroIf = false;
                        comandoAtual += 1;
                    }
                }
            }else{      
                comandoAtual = 0;
                ciclos--;
            }//=======
        }               
    }else if (executar == false){//=================================
        ciclos = maxCiclos;
    }
    
    //Condição de vitória
    }else if(vencer == true &amp;&amp; perder == false &amp;&amp; alarm[1]&lt;0 &amp;&amp; terminou == false){
        obj_visualizador.sprite_index = spr_animVitoria;
        alarm[1] = obj_visualizador.image_number;
    }else if (perder == true &amp;&amp; terminou == false &amp;&amp; alarm[2]&lt;0){///Cuidar dos casos de perda
        if(perderPor == BATEU_MUITO){
            obj_visualizador.sprite_index = spr_animDerrotaBaterMuito;        
        }
        switch(perderPor){
            default:
                break;
            case BATEU_MUITO:
                with(obj_visualizador){
                    sprite_index = spr_animDerrotaBaterMuito;
                    image_speed = 1;
                }
                alarm[2] = 2*room_speed;
                break;
            case BATEU_POUCO:
                with(obj_visualizador){
                    sprite_index = spr_animDerrotaBaterPouco;
                    image_speed = 1;
                }
                alarm[2] = 2*room_speed;
                break;
        }
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Desenhar os ciclos

if(room == Room_Fase2){
    sprite_index = spr_blocoDicas;
    with(obj_visualizador){
        draw_set_font(font1);
        draw_set_colour(c_black);
        draw_text(x + 10, y + 4, "Ciclos:" + string(maxCiclos - ciclos));
    }
}else if(room == Room_Fase1){
    sprite_index = spr_blocoDicas2;
    draw_set_font(font1);
    draw_set_colour(c_black);
    draw_sprite(spr_espCiclos, 0, 754, 97);
    draw_text(754 + 10, 97, "Ciclos:" + string(maxCiclos - ciclos));
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reiniciar o jogo

game_restart();
//room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
