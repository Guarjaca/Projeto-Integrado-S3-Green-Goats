<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bloco2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Incizalizar o objeto invisível de colisão
//Criar uma instância do obj_lado pra servir como imã pra encaixar os blocos

ladoDireito = instance_create(x,y,obj_lado);
with(ladoDireito){ 
    blocoPai = noone;
}   
ladoDireito.blocoPai = self;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Criar conectores

//globalvar listaConectores;
globalvar qntdConectores;
//listaConectores[0] = instance_create(x - 32, y + 32 + 40, obj_conector);
listaConectores = array_create(0);
qntdConectores = 0;
    
//listaConectores[0].ordem = 0;
    
//Variável para lembrar em que casa está o último comando
//lastCommand = array_length_1d(listaConectores) - 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variáveis da própria conexão

ciclosLasso = 0;
conectado = false;
blocoLigado = noone;
pego = false;
voltando = false;

alocado = false;

xInicial = x;
yInicial = y;

caminhoVolta = path_add();

path_add_point(caminhoVolta, xInicial, yInicial, 100);
path_add_point(caminhoVolta, x, y, 100);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cuidar da criação dos conectores

if(qntdConectores &gt; 0){
    if (listaConectores[qntdConectores - 1].conectado == true){//Se o último conector se conectar com alguém
        listaConectores[qntdConectores] = instance_create(listaConectores[qntdConectores-1].x, listaConectores[qntdConectores-1].y + 80 , obj_conector);
        listaConectores[qntdConectores].ordem = qntdConectores;
        qntdConectores += 1;  
    }
}else{
    if (alocado == true){
        listaConectores[qntdConectores] = instance_create(x - 32, y + 32 + 40, obj_conector);
        listaConectores[qntdConectores].ordem = qntdConectores;
        qntdConectores += 1;
    }
}
    

/*
for (i=0; i&lt;array_length_1d(listaConectores); i++){
    show_debug_message("obj_bloco: conector " + string(i) + ": " + string(listaConectores[i].comandoConector));
    show_debug_message("obj_bloco: conector " + string(i) + " está : " + string(listaConectores[i].conectado));
}
*/



//show_debug_message("obj_bloco: qntd de Conectores ==" + string(qntdConectores) );
/*else if(qntdConectores &gt;= 2 ){
    if (listaConectores[qntdConectores - 2].conectado == false){
        listaConectores[qntdConectores - 1] = noone;
        show_debug_message("uepa " + string(listaConectores[qntdConectores - 2].conectado));
        qntdConectores -= 1;
    }
}
*/


//Checar qual a casa que tem o último comando
/*
//show_debug_message("lastCommand: " + string(lastCommand));
//show_debug_message("tamanho lista: " + string(array_length_1d(listaConectores)));
                
if(listaConectores[lastCommand].conectado == false){
    lastCommand = array_length_1d(listaConectores) - 1;
    while(listaConectores[lastCommand].conectado==false){
        if(lastCommand &lt;= 0 || listaConectores[lastCommand].conectado==true){
            break;
        }else{
            show_debug_message("passou pelo else!");
            lastCommand--;
                
        }
    }
}
    //show_debug_message("lastCommand: " + string(lastCommand));
    //show_debug_message("tamanho lista: " + string(array_length_1d(listaConectores)));
    
    */
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Passar o número de ciclos pra obj_deus

if (obj_deus.executar == false /*&amp;&amp; conectado==true*/){
    ciclos = ciclosLasso;
    var len = array_length_1d(listaConectores);
    array_copy(listaComandos, 0, listaConectores, 0, len);
    for(i=0; i&lt;len; i++){//Transforma os itens da listaComandos em comandos ao invez de IDs de objetos
        listaComandos[i] = listaComandos[i].comandoConector;
        if(listaComandos[i] != 0){//Checa qual o último comando
            obj_deus.comandoFinal = i;
        }
    }
    
    //show_debug_message("obj_bloco: Passei pelo if!");
    
}


show_debug_message("obj_bloco: ciclos:" + string(ciclos));
//show_debug_message("obj_bloco: ciclosLasso:" + string(ciclosLasso));
//show_debug_message("obj_bloco: conectado: " + string(conectado));
//show_debug_message("obj_bloco: executar está " + string(obj_deus.executar));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resetar os valores se não tiver nada conectado

if(conectado == false){
    ciclosLasso = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movimento

click = mouse_check_button(mb_left);
justClicked = mouse_check_button_pressed(mb_left);

//==============
//Definir com quem vai ligar
if (voltando == false){
    if (place_meeting(x, y, obj_ladoDeus)){
        blocoLigado = obj_ladoDeus.blocoPai;
    }else{
        blocoLigado = noone;
    }
}
//=============================
//Seção de lidar caso tenha sido pego
if (pego == true){
    x = mouse_x;
    y = mouse_y;
}else{
    if (blocoLigado != noone){
        alocado = true;
    }else{
        alocado = false;
        //=========================
        if (place_meeting(x, y, obj_areaProibida)){
            if (voltando == false){
                path_start(caminhoVolta, 100, path_action_stop, true);
                voltando = true;
            }else{
                if(x == xInicial &amp;&amp; y == yInicial){
                    voltando = false;
                }
        }
        }else{
            if(x == xInicial &amp;&amp; y == yInicial){
                voltando = false;
            }
        //============================    
        }  
    }
}
//=========================
//Seção ao estar alocado
if (alocado == true){
    x = blocoLigado.x + 32 + 22;
    y = blocoLigado.y + 40 + 24;
} 


show_debug_message("obj_bloco: pego está: " + string(pego));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if (qntdConectores &gt; 0){
    draw_sprite(spr_barraFinal, 0, listaConectores[qntdConectores - 1].x, listaConectores[qntdConectores - 1].y + 40);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
